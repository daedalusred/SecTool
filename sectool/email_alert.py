"""
Send the output from the plugins in an email alert to the user
who triggered the job.
"""

import json
from email.mime.text import MIMEText
from subprocess import Popen, PIPE
import sectool.markdown_utils
from sectool.parsers import wapiti as wapiti_parser

SENDMAIL = "/usr/sbin/sendmail"
FROM_ADDRESS = "noreply-sectool@digital.cabinet-office.gov.uk"
HDR_MSG = list()
HDR_MSG.append("Do not reply to this email address as it is unmonitored.")
HDR_MSG.append("Please add {0} to your list of known addresses."
               .format(FROM_ADDRESS))
HDR_MSG.append(("Please use a markdown reader to view ",
               "this message with better formatting."))
DEBUG = True


class Email(object):
    def __init__(self, duration, users_email_address, plugin_name,
                 input_file, target_url, show_std_out=True):
        self.plugin_name = plugin_name
        self.input_file = input_file
        self.user_email_addr = users_email_address
        self.target_url = target_url
        self.show_std_out = show_std_out
        self.duration = duration

    def get_execution_time(self):
        # TODO: convert time to minutes and seconds rather than decimal minutes
        return "Execution time: {0:.2f} minutes.{1}".format(self.duration,
                                                            '\n'*3)

    def generate_report_hdr(self):
        output_str = ""
        for quote in HDR_MSG:
            output_str += sectool.markdown_utils.quote(quote)
        return output_str

    def generate_report(self, data, output_format):
        if output_format == 'json':
            return self.parse_wapiti_output(data, output_format)[0]
        output = ""
        output += self.generate_report_hdr()
        output += "\n"
        output += self.get_execution_time()
        data = json.loads(data)
        report, no_vulns = self.parse_wapiti_output(data, output_format)
        if output_format == 'markdown':
            return output + report, no_vulns
        else:
            return report, no_vulns

    def parse_wapiti_output(self, data, format='markdown'):
        """Parse the JSON output generated by Wapiti into a string to be
        displayed as markdown in the email.
        """
        output = sectool.markdown_utils.header("SecTool Report", 1)
        max_key = max(len(k) for k in data['vulnerabilities']) + 2
        no_vulns = sum([len(x) for x in data['vulnerabilities'].values()])

        table_hdr = list()
        table_hdr.append(("Category", "Found Vulnerabilities"))
        table_hdr.append(("-" * (max_key - 2),
                          ":" + ("-" * (max_key - 4)) + ":"))

        output += sectool.markdown_utils.header("Summary", 2)
        for i in table_hdr:
            output += sectool.markdown_utils.pad_row(i, max_key)

        if no_vulns == 0:
            return output

        parser = wapiti_parser.Wapiti()

        if format == 'markdown':
            output += parser.parse_to_markdown(data, max_key=max_key)
        elif format == 'html':
            output += parser.parse_to_html(data, current_output=output)
        else:
            return parser.parse_to_json(data)
        return output, no_vulns

    def create_email(self, output_format):
        """Creates an email by setting the subject, from, to, and body.
        """
        # create the contents of the email
        output = ""
        with open(self.input_file, 'r+') as f:
            output = self.generate_report(f.read(), output_format)
        message = MIMEText(output[0])

        # how many issues the tool has found for the email subject line
        num_or_errors = output[1]
        issues = "Issues Found"
        if num_or_errors == 1:
            issues = "Issue Found"

        # add addressing/subject to the email
        message['Subject'] = "SecTool Results: {0} {1} [{2}]".format(
            num_or_errors, issues, self.plugin_name)
        message['From'] = FROM_ADDRESS
        message['To'] = self.user_email_addr

        return message, output

    def send_email(self, message):
        """Send the email containing the vulnerability scanner output to the
        address the user specified when kicking-off the job.
        """
        p = Popen([SENDMAIL, "-t"], stdin=PIPE)
        p.communicate(bytes(message.as_string(), 'utf-8'))
        if p.returncode != 0:
            raise Exception(("An exception occurred when attempting",
                            "to email results."))

    def trigger_email_alert(self, output_format):
        """Trigger an e-mail alert to send to the user.
        """
        msg, report = self.create_email(output_format)
        if self.show_std_out is True:
            print(report)
        self.send_email(msg)
